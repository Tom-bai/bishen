module.exports = {
    nav: {
        blocks: 'BLOCKES',
        account: 'ACCOUNTS',
        coins:'TOKENS',
        transaction: 'TRANSACTION',
        success:'Success！',
        error:'Error please restart！',
        loading:'Loading！',
        exchange: 'EXCHANGE',
        market: 'CONTRACT',
        vote: 'VOTE',
        othercontracts: 'OTHERS'
    },
    loading: {
        loading:'In Sync...',
        enter:'Enter >>',
        amount:'AMOUNT',
        starting:'Starting server',
        error: 'Service disconnected, please restart'
    },
    blocks: {
        height:'Height',
        date:'Date',
        creater:'Creater',
        fee:'Fee',
        amount:'Amount',
        confirm:'Confirm',
        prev:'PREV',
        next:'NEXT',
        avgAmount:'Average number of transactions in the block',
        avgFee:'Average fee of each block',
        transitionNums:'Total volume',
        genTime:'Block generation time',
        totalAmount:'Volume',
        time:'Time',
    },
    blocklist: {
        blockinfo:'Block info',
        date:'Block date',
        nums:'Nums',
        fee:'Total fee',
        producer:'Block producer',
        height:'Block height',
        prev:'Prev hash',
        now:'Now hash',
        sign:'Block signature',
        size:'Block size',
        Bill:'Trading Bill',
        tranStream:'Trading stream',
        conStream:'Contract flow',
        confirm:'Confirm',
        type:'Type',
        type1:'Transfer transaction',
        type2:'Issuing tokens',
        type3:'Mining reward',
        type4:'Pending contract',
        type5:'Voting contract',
        type6:'Token contract',
        type7:'Pending contract funds',
        type8:'Voting contract funds',
        type9:'Token contract funds',
        type10:'Exchange transaction',
        type11:'Cancel pending order',
        type12:'Voting option',
        type13:'Other Contracts',
        send:'Sender',
        rec:'Receiver',
        theFee:'Fee',
        name:'Token name',
        remarks:'Remarks',
        sourceAddr:'Source address',
        redemptionAddr:'Contract address',
        sourceAmount:'Source amount',
        conversionAmount:'Conversion amount',
        hash:'Hash',
        time:'Time',
        promulgator:'Promulgator',
        Amount:'Amount',
        Redeemedperson:'Redeemed Person',
        Canceledperson:'Canceled Person',
        Votingperson:'Voting Person',
        theme:'Theme',
        Option:'Option',
    },
    token:{
        overview:'Overview',
        add:'Add token',
        issued:'Issue token',
        address:'Address',
        name:'Token name',
        nameLabel:'Please enter the token name',
        unit:'Unit median',
        unitLabel:'Please enter the minimum unit digit',
        num:'Circulation',
        numLabel:'Please enter the circulation',
        pwd:'Password',
        pwdLabel:'Please enter the wallet password',
        remarkLabel:'Please enter remark',
        fee:'Fee：',
        back:'<< back',
        otherCoinName:'Token name',
    },
    account: {
        overview:'Account Overview',
        accounts:'Accounts',
        contract:'Smart Contract',
        wallet:'Wallet',
        more:'more ',
        add:'Add Wallet',
        import:'Import Wallet File',
        addWallet:'Add Wallet',
        password:'Password',
        again:'Confirm　',
        pwdPlaceholder:'Please input your password',
        againPlaceholder:'Please input your password again',
        enter:'Enter',
        cancel:'Cancel',
        importFile:'Import wallet file',
        nextStep:'Next step,input the mnemonic',
        inputMnemonic:'Please input your mnemonic',
        mnemonicTip:'You need input your mnemonic to use the wallet',
        enterAdd:'Enter',
        copy:'Copy'
    },
    accountDetail:{
        detail:'Wallet detail',
        backup:'Backup',
        firstTip:'If you are a first transfer, then you need to enter your public key when transferring money!',
        publicKey:'Publickey',
        none:'none',
        available:'Available assets',
        effective:'Effective assets',
        address:'Wallet address',
        cancel:'Cancel',
        next:'Next',
        record:'Transaction record',
        date:'Date',
        height:'Height',
        nums:'Nums',
        fee:'Fee',
        type:'Type',
        confirm:'Confirm',
        remember:'Please remember your mnemonic',
        rememberTip:'Please input your mnemonic',
        tip:'Please record your wallet mnemonic to safe place,don\'t talk to others!',
        password:'Password',
        pwdPlaceholder:'Input your password',
        path:'Select Path',
        export:'Export wallet file',
        type0:'transaction',
        type1:'Release token',
        type2:'Forging reward',
        type3:'Contract flow',
        type4:'Contract funds flow',
        type5:'Exchange water',
        type6:'Cancellation of contract',
        type7:'Voting option',
        zc:'Expenditure',
        sr:'Income',
        fileName:'FileName',
    },
    accountTip:{
        tip1:'Accounts are password protected keys that can hold PTN tokens. They can control contracts, but can\'t display incoming transactions.',
        tip2:'Once you have more than 1 PTNer you can create more sophisticated contracts. Wallets are smart contracts that allow your funds to be controlled by multiple accounts. They can have an optional daily limit on withdrawals to increase security. Create your own custom contracts on the Contracts tab.'
    },
    transaction: {
        send:'Send Account',
        recieve:'Recieve Account',
        nums:'Trade Nums',
        fee:'Fee',
        selToken:'Select token',
        remarks:'Remarks',
        pwd:'Password',
        enter:'Enter',
        select:'Select send address',
        recAddress:'Address',
        recPlaceholder:'Input recieve account',
        pubKeyPlaceholder:'Input recieve account\'s public key',
        amountPlaceholder:'Input Amount of the transaction',
        remarkPlaceholder:'Input remark',
        pwdPlaceholder:'Input password',
        amount:'Amount',
        total:'Total amount',
    },
    tip: {
        send:'Send',
        rec:'Recieve',
        input:'Please input your password',
        enter:'Enter',
        forging:'Forging',
        stop:'No Forg',
        forgBtn:'Start',
        stopBtn:'Stop',
        cancel:'Cancel',
        fileTypeFail: 'File format is incorrect',
        fileLoadFail: 'Path error',
        fileLoadEmpty: 'Path cannot be empty',
        notName: 'Cannot be named with a special symbol, such as \\/:*?"<>|',
        tip1: 'The password is empty or inconsistent twice',
        tip2: 'Please import the wallet file',
        tip3: 'Copy successfully',
        tip4: 'Copy failed',
        tip5:'This account had no assets, can not start',
        tip6:'It had a new version, please go to the official website to download!',
        tip7:'Token name can only enter 3-20 letters or numbers',
        tip8:'Unit digits can only enter numbers',
        tip9:'Token circulation can only be an integer between 1000-99999999999',
        tip10:'The transaction amount must be a number',
        tip11:'The number of digits is between 6-8',
        tip12:'The circulation cannot exceed 99999999999',
        tip13:'The circulation of more than 10000000 units must not exceed 7',
        tip14: 'The receiving address must not be empty',
        code100: 'computed successed',
        code101:'Failed to get data',
        code102:'Account was no exist',
        code103:'Password can only be 6-20 characters, numbers, characters combination(!@#$%^&*()-=_+,.<>/-)',
        code104:'Block is being synchronized, unable to transfer',
        code105:'The sender account does not exist',
        code106:'Insufficient balance available',
        code107:'Export successful',
        code108:'Mnemonic mistakes',
        code109:'This wallet already exists and can not be imported',
        code110:'Import successful',
        code111:'Import failed',
        code112:'Load account successfully',
        code113:'Failed to load account',
        code114:'Trading hash does not exist',
        code115:'Block being synchronized, unable to start',
        code116:'Casting machine started successfully',
        code117:'Caster failed to stop',
        code118:'Casting machine stopped successfully',
        code119:'Issue token successed',
        code120:'Forging',
        code121:'No Forged',
        code122:'Computed success',
        code123:'Token already exists',
        code124:'The token circulation can only be 1000~99999999999',
        code125:'The token accuracy can only be 6-8',
        code126:'The transaction amount must be greater than 0',
        code127:'Token name can only be 3-20 words or nums',
        code128:'Transaction amount accuracy out of range',
        code129:'Sender ptn insufficient balance',
        code130:'The current node has an account in mining and can no longer open mining',
        code131:'Token does not exist or has incorrect parameters',
        code132:'The contract has been redeemed',
        code133:'Contract address is empty',
        code134: 'Wallet address is empty',
        code135: 'Please enter your password',
        code136: 'Unknown bill',
        code137: 'Unknown local address public key',
        code138: 'Successful cancellation',
        code139: 'Successful transaction',
        code140:'Unknown contract',
        code141:'The contract has expired',
        code142:'The contract has been redeemed and cannot be revoked',
        code143:'When the circulation exceeds 10000000000, the unit must not exceed 7',
        code144: 'Please select an option',
        code145: 'Successful vote',
        code146: 'The contract has expired, thank you for your enthusiastic participation',
        code147:'You have participated in this vote.',
        code148:'This option has exceeded the contract code setting and cannot vote.',
        code149:'You have already issued this token, please wait for confirmation.',
        code150:'Successful token delivery.',
        code151:'Method execution succeeded',
        code152:'No such method! Or the delivery parameters do not correspond, please check',
        code153:'The code is abnormal and cannot be executed normally.',
        code154:'Incorrect delivery parameters',
        code200:'Transfer request has been submitted',
        code201:'The receiving account did not generate the transaction, please provide the wallet public key',
        code202:'Verification passed',
        code203:'Operation error',
        code301:'Password was wrong',
        code401:'The wallet address is not the same as the public key',
        code500:'System error, please try again later',
        
        code600: 'Event does not match'
    },
    api: {
        created:'Create wallet account',
        account:'Get account information',
        transfer:'Transfer interface',
        transaction:'Get transaction list',
        url:'Require URL',
        type:'Require Type',
        params:'Params',
        name:'Name',
        isRequired:'Is Required',
        remark:'Remark',
        curlexample:'CURL Example',
        example:'Example',
        code:'Code',
        codeInfo:'Status code description'
    },
    contractType: {
        state0:'Unfinished',
        state1:'Finished',
        state2:'Revoked',
        type3:'Pending contract',
        type4:'Capital Pool Award'
    },
    exchange: {
        undo: 'Undo',
        detail:'Exchange detail',
        state1:'Contract state',
        account: 'Exchange account',
        accountaddr: 'Account address',
        contractaddr: 'Contract address',
        toAddr: 'Exchang address',
        buy: 'Buy',
        sell: 'Sell',
        operating: 'Operating',
        exchange: 'Exchange',
        noEx: 'Not redeemed',
        success: 'Successed',
        cancel: 'Cancel',
        state:'State',
        sure:'Are you sure you want to compile and publish the contract?',
        fromToken:'Source Token',
        toToken: 'Redeem Token',
        exState:'Exchange status',
        date:'Date',
        search: 'Search'
    },
    othercontracts:{
        conAddr: 'Contract address',
        conIssuer: 'Contract issuer',
        class: 'Class name',
        detail: 'Details',
        funcName: 'Method name',
        paramsExample: 'Parameter example',
        resType: 'Return type',
        show: 'Show',
        paramsEdit: 'Parameter editing',
        EditTips: 'Tips: Only change the value of keyval.',
        cancel: 'Cancel',
        doit: 'Run',
        res: 'Return Value',
    },
    vote: {
        vote:'Vote',
        voteState:'Voting status',
        notFinish:'Unfinished',
        finished:'Finished',
        canceled:'Cancelled',
        votePro:'Voting Project',
        state:'Status',
        operating:'Operating',
        detail:'Detail',
        option:'Option',
        fee:'Voting fee',
        confirm:'Confirm',
        ConAddr:'Contract address',
        initiator:'Voting initiator',
        condition:'As of condition',
        voters:'Voters',
        ticket:'tickets ',
        addrText0:'Voters',  
        addrText1:'Vote option ',
        addrText2:'\'s address',
        password:'Please enter your password',
        prompt:'prompt',
        certain:'certain',
        cancel:'cancel'
    },
    othercoin: {
        othercoin: "Coin",
        issuer: "Issuer",
        othercoinName: "Coin",
        circulation: "Circulation",
        precision: "Precision",
        time: "Time",
        operating: "Operating",
        issue: "Issue",
        coinAddr: "Address",
        finished:'Finished',
    },
    contract: {
        submit:'Submit contract',
        mycontract: 'My contract',
        back: 'Back',
        account: 'Account',
        type: 'Type',
        pend: 'Pending orders',
        othercontract: 'Other contracts',
        code: 'Contract code',
        fee: 'Fee',
        compile: 'Compile and release the contract code',
        list: 'My list of contracts',
        error: 'Code error, please check',
        enter: 'Contract submitted, waiting for synchronization to create'
    },
    createCode: {
        code10000: 'Wrong code',
        code10001: 'Illegal contract',
        code10002:'Contract is illegal, brackets are not equal',
        code10003:'The contract is illegal, the contract is not ending with }',
        code10004:'{The preceding variable can only be composed of alphanumeric underscores',
        code10005:'(The preceding variable can only be composed of alphanumeric underscores',
        code10006:'are not alphanumeric underscores',
        code10007:'Illegal parameter naming',
        code10008:'variable writing must begin with set',
        code10009:'parameter writing is not standard',
        code10010:'variable type writing is undefined',
        code10011:'variable writing = not standard',
        code10012:'duplicate event names',
        code10013:'Event parameters do not exist in the definition',
        code10014:'duplicate event parameter name',
        code10015:'Duplicate function name',
        code10016:'Duplicate function name',
        code10017:'event coin is just an integer',
        code10018:'There must be a ptn token in the event parameter',
        code10019:'if condition is illegal',
        code10020:'Illegal naming, beginning with a letter and consisting of an alphanumeric underscore',
        code10021:'Unmatched types',
        code10022:'Duplicated event names',
        code10023:'Too many commas in the event',
        code10024:'The parameter sequence in the event is not found',
        code10025:'Event coin cannot be greater than 100000',
        code10026:'Method return error',
        code10027:'Method assignment error',
        code10028:'Assignment operation parameter type error',
        code10029:'Wrong assignment',
        code10030:'Mismatch type',
        code10031:'Return keyword error',
        code10032:'Voting method cannot exist return',
        code10033:'Assignment operation type does not match',
        code10034:'Assignment operation type does not match',
        code10035:'Assignment operation type does not match',
        code10036:'Token accuracy can only be 6-8',
        code10037:'The token circulation can only be an integer of 1000-100000000000',
        code10038:'When the circulation is greater than or equal to 10000000000, the unit shall not exceed 7',
        code10039:'Array parameters are not standardized',
        code10040:'If condition is judged incorrectly',
        code10041:'String comparison can only be equal to and not equal',
        code10042:'Currently only supports a single class',
        code10043:'Array content default string does not need to write quotes',
        code10044:'There must be a constant light in the if condition',
        code10045:'stop error',
    }
}